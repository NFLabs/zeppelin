/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencyManagement {
  /** Definition of dependencies versions */      
  def hadoop_version = getVersion("hadoop_version", "1.0.4")
  def protobuf_version = getVersion("protobuf_version", "2.4.1")
  def jets3t_version = getVersion("jets3t_version", "0.7.1")
  
  if (project.hasProperty('hadoop-0.23')) {
    hadoop_version = "0.23.10"
  }
  if (project.hasProperty('hadoop-2.2')) {
    hadoop_version = "2.2.0"
    protobuf_version = "2.5.0"
    jets3t_version = "0.7.1"
  }
  if (project.hasProperty('hadoop-2.3')) {
    hadoop_version = "2.3.0"
    protobuf_version = "2.5.0"
    jets3t_version = "0.9.0"
  }
  if (project.hasProperty('hadoop-2.4')) {
    hadoop_version = "2.4.0"
    protobuf_version = "2.5.0"
    jets3t_version = "0.9.0"
  }

  def spark_version = getVersion("spark_version", "1.1.1")
  def scala_version = getVersion("scala_version", "2.10.4")
  def scala_binary_version = getVersion("scala_binary_version", "2.10")
  def mesos_version = getVersion("mesos_version", "0.18.1")
  def mesos_classifier = getVersion("mesos_classifier", "shaded-protobuf")
  def akka_group = "org.spark-project.akka"
  def akka_version = getVersion("akka_version", "2.2.3-shaded-protobuf")
  def slf4j_version = getVersion("slf4j_version", "1.7.5")
  def log4j_version = getVersion("log4j_version", "1.2.17")
  def yarn_version = getVersion("hadoop_version", "${hadoop_version}")
  def hbase_version = getVersion("hbase_version", "0.94.6")
  def zookeeper_version = getVersion("zookeeper_version", "3.4.5")
  def hive_version = getVersion("hive_version", "0.12.0")
  def parquet_version = getVersion("parquet_version", "1.4.3")
  def jblas_version = getVersion("jblas_version", "1.2.3")
  def jetty_version = getVersion("jetty_version", "8.1.14.v20131031")
  def chill_version = getVersion("chill_version", "0.3.6")
  def codahale_metrics_version = getVersion("codahale_metrics_version", "3.0.0")
  def avro_version = getVersion("avro_version", "1.7.6")
  def java_version = getVersion("java_version", "1.7")
  def cxf_version = getVersion("cxf_version", "2.7.7")
  def gson_version = getVersion("gson_version", "2.1")
  def guava_version = getVersion("guava_version", "15.0")
 
  dependencies {
    "org.eclipse.jetty:jetty-util" "${jetty_version}"
    "org.eclipse.jetty:jetty-security" "${jetty_version}"
    "org.eclipse.jetty:jetty-plus" "${jetty_version}"
    "org.eclipse.jetty:jetty-server" "${jetty_version}"
    "org.eclipse.jetty.aggregate:jetty-all-server" "${jetty_version}"
    "com.google.code.gson:gson" "${gson_version}"
    "com.google.guava:guava" "${guava_version}"
    "org.apache.httpcomponents:httpclient" "4.3.6"
    "org.apache.httpcomponents:httpcore" "4.3.3"
    "commons-collections:commons-collections" "3.2.1"
    "commons-lang:commons-lang" "2.5"
    "org.apache.commons:commons-lang3" "3.3.2"
    "org.apache.commons:commons-math3" "3.2"
    "commons-codec:commons-codec" "1.5"
    "commons-configuration:commons-configuration" "1.9"
    "commons-io:commons-io" "2.4"
    "commons-logging:commons-logging" "1.1.1"
    "com.google.code.findbugs:jsr305" "1.3.9"
    "org.slf4j:slf4j-api" "${slf4j_version}"
    "org.slf4j:slf4j-log4j12" "${slf4j_version}"
    "org.slf4j:jul-to-slf4j" "${slf4j_version}"
    "org.slf4j:jcl-over-slf4j" "${slf4j_version}"
    "log4j:log4j" "${log4j_version}"
    "com.ning:compress-lzf" "1.0.0"
    "org.xerial.snappy:snappy-java" "1.0.5"
    "com.clearspring.analytics:stream" "2.5.1"
    "com.google.protobuf:protobuf-java" "${protobuf_version}"
    "com.twitter:chill_${scala_binary_version}" "${chill_version}"
    "com.twitter:chill-java" "${chill_version}"
    "${akka_group}:akka-actor_${scala_binary_version}" "${akka_version}"
    "${akka_group}:akka-remote_${scala_binary_version}" "${akka_version}"
    "${akka_group}:akka-slf4j_${scala_binary_version}" "${akka_version}"
    "${akka_group}:akka-testkit_${scala_binary_version}" "${akka_version}"
    "colt:colt" "1.2.0"
    "org.apache.mesos:mesos" "${mesos_version}"
    "commons-net:commons-net" "2.2"
    "io.netty:netty" "3.6.6.Final"
    "io.netty:netty-all" "4.0.17.Final"
    "org.apache.derby:derby" "10.4.2.0"
    "com.codahale.metrics:metrics-core" "${codahale_metrics_version}"
    "com.codahale.metrics:metrics-jvm" "${codahale_metrics_version}"
    "com.codahale.metrics:metrics-json" "${codahale_metrics_version}"
    "com.codahale.metrics:metrics-ganglia" "${codahale_metrics_version}"
    "com.codahale.metrics:metrics-graphite" "${codahale_metrics_version}"
    "org.scala-lang:scala-compiler" "${scala_version}"
    "org.scala-lang:scala-reflect" "${scala_version}"
    "org.scala-lang:jline" "${scala_version}"
    "org.scala-lang:scala-library" "${scala_version}"
    "org.scala-lang:scala-actors" "${scala_version}"
    "org.scala-lang:scalap" "${scala_version}"
    "org.scalatest:scalatest_${scala_binary_version}" "2.1.5"
    "org.easymock:easymockclassextension" "3.1"
    "org.mockito:mockito-all" "1.9.0"
    "org.scalacheck:scalacheck_${scala_binary_version}" "1.11.3"
    "junit:junit" "4.11"
    "com.novocode:junit-interface" "0.10"
    "org.apache.curator:curator-recipes" "2.4.0"
    "org.apache.hadoop:hadoop-client" "${hadoop_version}"
    "org.apache.avro:avro" "${avro_version}"
    "org.apache.avro:avro-ipc" "${avro_version}"
    "org.apache.avro:avro-mapred" "${avro_version}"
    "org.apache.zookeeper:zookeeper" "${zookeeper_version}"
    "net.java.dev.jets3t:jets3t" "${jets3t_version}"
    "org.apache.hadoop:hadoop-yarn-api" "${yarn_version}"
    "org.apache.hadoop:hadoop-yarn-common" "${yarn_version}"
    "org.apache.hadoop:hadoop-yarn-server-web-proxy" "${yarn_version}"
    "org.apache.hadoop:hadoop-yarn-client" "${yarn_version}"
    "org.codehaus.jackson:jackson-mapper-asl" "1.8.8"
    "org.codehaus.jackson:jackson-core-asl" "1.8.8"
    "com.thoughtworks.paranamer:paranamer" "2.6"
    "com.sun.jersey:jersey-server" "1.9"
    "com.sun.jersey:jersey-core" "1.9"
    "com.sun.jersey:jersey-client" "1.9"
    "com.sun.xml.bind:jaxb-impl" "2.2.6"
    
    "org.apache.spark:spark-core_2.10" "${spark_version}"
    "org.apache.spark:spark-repl_2.10" "${spark_version}"
    "org.apache.spark:spark-sql_2.10" "${spark_version}"
    "org.apache.spark:spark-hive_2.10" "${spark_version}"
    "org.apache.spark:spark-streaming_2.10" "${spark_version}"
    "org.apache.spark:spark-streaming-twitter_2.10" "${spark_version}"
  }
}

/**
 * Small function to get override version via property
 * like gradle -PmyVersion=10.2
 */
def getVersion(String propertyName, String minimalVersion) {
  return project.hasProperty(propertyName) ? project."${propertyName}" : minimalVersion
}
